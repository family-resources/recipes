{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/briancooper/personal/recipes-app/src/Authentication.js\";\nimport * as React from \"react\";\nimport { API_KEY, CLIENT_ID, RECIPES_SHEET_ID } from \"./constants\";\n/**\n *  Initializes the API client library and sets up sign-in state\n *  listeners.\n */\n\nfunction initClient() {\n  global.gapi.client.init({\n    apiKey: API_KEY,\n    clientId: CLIENT_ID,\n    scope: \"https://www.googleapis.com/auth/spreadsheets.readonly\"\n  }).then(function () {\n    // Listen for sign-in state changes.\n    global.gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus); // Handle the initial sign-in state.\n\n    updateSigninStatus(global.gapi.auth2.getAuthInstance().isSignedIn.get());\n  }, function (error) {\n    appendPre(JSON.stringify(error, null, 2));\n  });\n}\n\nexport function Authentication() {\n  global.gapi.load(\"client:auth2\", initClient);\n  /**\n   *  Called when the signed in status changes, to update the UI\n   *  appropriately. After a sign-in, the API is called.\n   */\n\n  function updateSigninStatus(isSignedIn) {\n    if (isSignedIn) {\n      authorizeButton.style.display = \"none\";\n      signoutButton.style.display = \"block\";\n      getRecipes();\n    } else {\n      authorizeButton.style.display = \"block\";\n      signoutButton.style.display = \"none\";\n    }\n  }\n\n  function handleAuthClick(event) {\n    global.gapi.auth2.getAuthInstance().signIn();\n  }\n\n  function handleSignoutClick(event) {\n    global.gapi.auth2.getAuthInstance().signOut();\n  }\n\n  function appendRawMessage(message) {\n    var pre = document.getElementById(\"content\");\n    var textContent = document.createTextNode(message + \"\\n\");\n    pre.appendChild(textContent);\n  }\n  /**\n   * Print the contents of the spreadsheet\n   * https://docs.google.com/spreadsheets/d/1mlCIY1G-CW1EfNddv7tjEVJoXCz6TyXLcNfqLdBRkzU/edit#gid=1825319816\n   */\n\n\n  function getRecipes() {\n    global.gapi.client.sheets.spreadsheets.values.get({\n      spreadsheetId: RECIPES_SHEET_ID,\n      range: \"Recipes!A2:L92\"\n    }).then(response => {\n      const recipes = response.result.values;\n\n      if (recipes.length > 0) {\n        global.recipes = recipes;\n      } else {\n        console.error(\"No Data Found\");\n      }\n    }, function (response) {\n      console.error(\"Error: \" + response.result.error.message);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAuthClick,\n      children: \"AUTHORIZE WITH GOOGLE ACCOUNT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_c = Authentication;\n\nvar _c;\n\n$RefreshReg$(_c, \"Authentication\");","map":{"version":3,"sources":["/Users/briancooper/personal/recipes-app/src/Authentication.js"],"names":["React","API_KEY","CLIENT_ID","RECIPES_SHEET_ID","initClient","global","gapi","client","init","apiKey","clientId","scope","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","get","error","appendPre","JSON","stringify","Authentication","load","authorizeButton","style","display","signoutButton","getRecipes","handleAuthClick","event","signIn","handleSignoutClick","signOut","appendRawMessage","message","pre","document","getElementById","textContent","createTextNode","appendChild","sheets","spreadsheets","values","spreadsheetId","range","response","recipes","result","length","console"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { API_KEY, CLIENT_ID, RECIPES_SHEET_ID } from \"./constants\";\n\n/**\n *  Initializes the API client library and sets up sign-in state\n *  listeners.\n */\nfunction initClient() {\n  global.gapi.client\n    .init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      scope: \"https://www.googleapis.com/auth/spreadsheets.readonly\",\n    })\n    .then(\n      function () {\n        // Listen for sign-in state changes.\n        global.gapi.auth2\n          .getAuthInstance()\n          .isSignedIn.listen(updateSigninStatus);\n\n        // Handle the initial sign-in state.\n        updateSigninStatus(\n          global.gapi.auth2.getAuthInstance().isSignedIn.get()\n        );\n      },\n      function (error) {\n        appendPre(JSON.stringify(error, null, 2));\n      }\n    );\n}\n\nexport function Authentication(): React.Node {\n  global.gapi.load(\"client:auth2\", initClient);\n\n  /**\n   *  Called when the signed in status changes, to update the UI\n   *  appropriately. After a sign-in, the API is called.\n   */\n  function updateSigninStatus(isSignedIn) {\n    if (isSignedIn) {\n      authorizeButton.style.display = \"none\";\n      signoutButton.style.display = \"block\";\n      getRecipes();\n    } else {\n      authorizeButton.style.display = \"block\";\n      signoutButton.style.display = \"none\";\n    }\n  }\n\n  function handleAuthClick(event) {\n    global.gapi.auth2.getAuthInstance().signIn();\n  }\n\n  function handleSignoutClick(event) {\n    global.gapi.auth2.getAuthInstance().signOut();\n  }\n\n  function appendRawMessage(message) {\n    var pre = document.getElementById(\"content\");\n    var textContent = document.createTextNode(message + \"\\n\");\n    pre.appendChild(textContent);\n  }\n\n  /**\n   * Print the contents of the spreadsheet\n   * https://docs.google.com/spreadsheets/d/1mlCIY1G-CW1EfNddv7tjEVJoXCz6TyXLcNfqLdBRkzU/edit#gid=1825319816\n   */\n  function getRecipes() {\n    global.gapi.client.sheets.spreadsheets.values\n      .get({\n        spreadsheetId: RECIPES_SHEET_ID,\n        range: \"Recipes!A2:L92\",\n      })\n      .then(\n        (response) => {\n          const recipes = response.result.values;\n          if (recipes.length > 0) {\n            global.recipes = recipes;\n          } else {\n            console.error(\"No Data Found\");\n          }\n        },\n        function (response) {\n          console.error(\"Error: \" + response.result.error.message);\n        }\n      );\n  }\n\n  return (\n    <div>\n      <button onClick={handleAuthClick}>AUTHORIZE WITH GOOGLE ACCOUNT</button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}