{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as React from \"react\";\nlet cachedScripts = [];\nexport function useScript(src) {\n  _s();\n\n  const [state, setState] = React.useState({\n    loaded: false,\n    error: false\n  });\n  React.useEffect(() => {\n    // If cachedScripts array already includes src that means another instance ...\n    // ... of this hook already loaded this script, so no need to load again.\n    if (cachedScripts.includes(src)) {\n      setState({\n        loaded: true,\n        error: false\n      });\n    } else {\n      cachedScripts.push(src); // Create script\n\n      let script = document.createElement(\"script\");\n      script.src = src;\n      script.async = true; // Script event listener callbacks for load and error\n\n      const onScriptLoad = () => {\n        setState({\n          loaded: true,\n          error: false\n        });\n      };\n\n      const onScriptError = () => {\n        // Remove from cachedScripts we can try loading again\n        const index = cachedScripts.indexOf(src);\n        if (index >= 0) cachedScripts.splice(index, 1);\n        script.remove();\n        setState({\n          loaded: true,\n          error: true\n        });\n      };\n\n      script.addEventListener(\"load\", onScriptLoad);\n      script.addEventListener(\"error\", onScriptError); // Add script to document body\n\n      document.body.appendChild(script); // Remove event listeners on cleanup\n\n      return () => {\n        script.removeEventListener(\"load\", onScriptLoad);\n        script.removeEventListener(\"error\", onScriptError);\n      };\n    }\n  }, [src] // Only re-run effect if script src changes\n  );\n  return [state.loaded, state.error];\n}\n\n_s(useScript, \"xVAzUzy7Sx0++H2fJjaAhbMwjrI=\");","map":{"version":3,"sources":["/Users/briancooper/personal/recipes-app/src/useScript.js"],"names":["React","cachedScripts","useScript","src","state","setState","useState","loaded","error","useEffect","includes","push","script","document","createElement","async","onScriptLoad","onScriptError","index","indexOf","splice","remove","addEventListener","body","appendChild","removeEventListener"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,IAAIC,aAAa,GAAG,EAApB;AAEA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AAAA;;AAC7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,KAAK,CAACM,QAAN,CAAe;AACvCC,IAAAA,MAAM,EAAE,KAD+B;AAEvCC,IAAAA,KAAK,EAAE;AAFgC,GAAf,CAA1B;AAKAR,EAAAA,KAAK,CAACS,SAAN,CACE,MAAM;AACJ;AACA;AACA,QAAIR,aAAa,CAACS,QAAd,CAAuBP,GAAvB,CAAJ,EAAiC;AAC/BE,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,KAAK,EAAE;AAAvB,OAAD,CAAR;AACD,KAFD,MAEO;AACLP,MAAAA,aAAa,CAACU,IAAd,CAAmBR,GAAnB,EADK,CAEL;;AACA,UAAIS,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,MAAAA,MAAM,CAACT,GAAP,GAAaA,GAAb;AACAS,MAAAA,MAAM,CAACG,KAAP,GAAe,IAAf,CALK,CAML;;AACA,YAAMC,YAAY,GAAG,MAAM;AACzBX,QAAAA,QAAQ,CAAC;AAAEE,UAAAA,MAAM,EAAE,IAAV;AAAgBC,UAAAA,KAAK,EAAE;AAAvB,SAAD,CAAR;AACD,OAFD;;AAIA,YAAMS,aAAa,GAAG,MAAM;AAC1B;AACA,cAAMC,KAAK,GAAGjB,aAAa,CAACkB,OAAd,CAAsBhB,GAAtB,CAAd;AACA,YAAIe,KAAK,IAAI,CAAb,EAAgBjB,aAAa,CAACmB,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AAChBN,QAAAA,MAAM,CAACS,MAAP;AACAhB,QAAAA,QAAQ,CAAC;AAAEE,UAAAA,MAAM,EAAE,IAAV;AAAgBC,UAAAA,KAAK,EAAE;AAAvB,SAAD,CAAR;AACD,OAND;;AAOAI,MAAAA,MAAM,CAACU,gBAAP,CAAwB,MAAxB,EAAgCN,YAAhC;AACAJ,MAAAA,MAAM,CAACU,gBAAP,CAAwB,OAAxB,EAAiCL,aAAjC,EAnBK,CAoBL;;AACAJ,MAAAA,QAAQ,CAACU,IAAT,CAAcC,WAAd,CAA0BZ,MAA1B,EArBK,CAsBL;;AACA,aAAO,MAAM;AACXA,QAAAA,MAAM,CAACa,mBAAP,CAA2B,MAA3B,EAAmCT,YAAnC;AACAJ,QAAAA,MAAM,CAACa,mBAAP,CAA2B,OAA3B,EAAoCR,aAApC;AACD,OAHD;AAID;AACF,GAlCH,EAmCE,CAACd,GAAD,CAnCF,CAmCQ;AAnCR;AAqCA,SAAO,CAACC,KAAK,CAACG,MAAP,EAAeH,KAAK,CAACI,KAArB,CAAP;AACD;;GA5CeN,S","sourcesContent":["import * as React from \"react\";\n\nlet cachedScripts = [];\n\nexport function useScript(src) {\n  const [state, setState] = React.useState({\n    loaded: false,\n    error: false,\n  });\n\n  React.useEffect(\n    () => {\n      // If cachedScripts array already includes src that means another instance ...\n      // ... of this hook already loaded this script, so no need to load again.\n      if (cachedScripts.includes(src)) {\n        setState({ loaded: true, error: false });\n      } else {\n        cachedScripts.push(src);\n        // Create script\n        let script = document.createElement(\"script\");\n        script.src = src;\n        script.async = true;\n        // Script event listener callbacks for load and error\n        const onScriptLoad = () => {\n          setState({ loaded: true, error: false });\n        };\n\n        const onScriptError = () => {\n          // Remove from cachedScripts we can try loading again\n          const index = cachedScripts.indexOf(src);\n          if (index >= 0) cachedScripts.splice(index, 1);\n          script.remove();\n          setState({ loaded: true, error: true });\n        };\n        script.addEventListener(\"load\", onScriptLoad);\n        script.addEventListener(\"error\", onScriptError);\n        // Add script to document body\n        document.body.appendChild(script);\n        // Remove event listeners on cleanup\n        return () => {\n          script.removeEventListener(\"load\", onScriptLoad);\n          script.removeEventListener(\"error\", onScriptError);\n        };\n      }\n    },\n    [src] // Only re-run effect if script src changes\n  );\n  return [state.loaded, state.error];\n}\n"]},"metadata":{},"sourceType":"module"}